import { LineEdit } from "std-widgets.slint";
import { Theme } from "../theme.slint";
import { Store, ColorPickerConfig } from "../store.slint";
import { Logic } from "../logic.slint";
import { Label } from "../base/label.slint";
import { IconBtn } from "../base/icon-btn.slint";
import { NoDataImg } from "../base/no-data.slint";

export component ColorPicker inherits Rectangle {
    property<float> scale: 1.0;
    property<bool> is-pick: false;
    property<bool> is-no-img: true;
    property<ColorPickerConfig> color-picker-config;

    function zoom-reset() {
        root.scale = 1.0;
        flick.viewport-x = 0;
        flick.viewport-y = 0;
    }

    function remove-img() {
        root.zoom-reset();
        root.is-pick = false;
        root.is-no-img = true;
        root.color-picker-config = {
            red: 0,
            green: 0,
            blue: 0,
            alpha: 0,
            hex: "",
        }
    }

    HorizontalLayout {
        padding: Theme.padding * 2;
        spacing: Theme.spacing * 4;

        Rectangle {
            border-width: 1px;
            border-color: Theme.dark-border-color;
            VerticalLayout {
                padding: Theme.padding;

                flick := Flickable {
                    viewport-width: root.is-no-img ? parent.width : Math.max(img.source.width * root.scale * 1px, parent.width);
                    viewport-height: root.is-no-img ? parent.width : Math.max(img.source.height * root.scale * 1px, parent.height);

                    interactive: !root.is-pick;
                    img := Image {
                        visible: !root.is-no-img;
                        width: img.source.width * root.scale * 1px;
                        height: img.source.height * root.scale * 1px;
                    }

                    NoDataImg {
                        visible: root.is-no-img;
                        width: parent.width;
                        text: Store.translator.tip-load-img;
                        opacity: 0.8;
                    }

                    TouchArea {
                        mouse-cursor: root.is-no-img || root.is-pick ? pointer : grab;
                        clicked => {
                            if (root.is-no-img) {
                                img.source = Logic.load-image();
                                if (img.source.width > 0) {
                                    root.is-no-img = !root.is-no-img;
                                }
                            } else {
                                if (root.is-pick && root.scale > 0) {
                                    root.color-picker-config = Logic.image-point-color((self.mouse-x / root.scale) / 1px, (self.mouse-y / root.scale) / 1px);
                                }
                            }
                        }
                    }
                }
            }
        }

        VerticalLayout {
            alignment: center;
            width: Theme.left-panel-width;
            spacing: Theme.spacing * 4;

            HorizontalLayout {
                visible: !root.is-no-img;
                spacing: Theme.spacing * 2;
                IconBtn {
                    bg-color: Colors.transparent;
                    colorize: Theme.basic-black-color;
                    icon: @image-url("../images/color-picker.svg");
                    checked: root.is-pick;
                    tip-text: Store.translator.tip-pick-color;

                    clicked => {
                        root.is-pick = !root.is-pick;
                    }
                }

                IconBtn {
                    bg-color: Colors.transparent;
                    colorize: Theme.basic-black-color;
                    icon: @image-url("../images/zoom-out.svg");
                    tip-text: Store.translator.tip-zoom-out;

                    clicked => {
                        root.scale += 0.2;
                    }
                }

                IconBtn {
                    bg-color: Colors.transparent;
                    colorize: Theme.basic-black-color;
                    icon: @image-url("../images/zoom-in.svg");
                    tip-text: Store.translator.tip-zoom-in;

                    clicked => {
                        root.scale -= 0.2;
                    }
                }

                IconBtn {
                    bg-color: Colors.transparent;
                    colorize: Theme.basic-black-color;
                    icon: @image-url("../images/zoom-reset.svg");
                    tip-text: Store.translator.tip-zoom-recover;
                    icon-width: self.width * 0.7;

                    clicked => {
                        root.zoom-reset();
                    }
                }

                IconBtn {
                    bg-color: Colors.transparent;
                    colorize: Theme.basic-black-color;
                    icon: @image-url("../images/delete-light.svg");
                    tip-text: Store.translator.tip-remove-image;
                    icon-width: self.width * 0.7;

                    clicked => {
                        root.remove-img();
                    }
                }
            }

            HorizontalLayout {
                Label {
                    width: 40%;
                    text: Store.translator.red;
                }
                le-red := LineEdit {
                    read-only: true;
                    text: color-picker-config.red;
                    placeholder-text: "0~255";
                }
            }
            HorizontalLayout {
                Label {
                    width: 40%;
                    text: Store.translator.green;
                }
                le-green := LineEdit {
                    read-only: true;
                    text: color-picker-config.green;
                    placeholder-text: "0~255";
                }
            }
            HorizontalLayout {
                Label {
                    width: 40%;
                    text: Store.translator.blue;
                }
                le-blue := LineEdit {
                    read-only: true;
                    text: color-picker-config.blue;
                    placeholder-text: "0~255";
                }
            }
            HorizontalLayout {
                Label {
                    width: 40%;
                    text: Store.translator.alpha;
                }
                le-alpha := LineEdit {
                    read-only: true;
                    text: color-picker-config.alpha;
                    placeholder-text: "0~255";
                }
            }
            HorizontalLayout {
                Label {
                    width: 40%;
                    text: Store.translator.hex;
                }
                le-hex := LineEdit {
                    read-only: true;
                    text: color-picker-config.hex;
                    placeholder-text: "rgba";
                }
            }

            HorizontalLayout {
                alignment: center;
                padding-top: Theme.padding * 2;
                Rectangle {
                    width: Theme.left-panel-width * 0.3;
                    height: self.width;
                    border-width: 1px;
                    border-radius: Theme.border-radius;
                    border-color: Theme.darker-fill-color;
                    background: rgba(root.color-picker-config.red, root.color-picker-config.green, root.color-picker-config.blue, root.color-picker-config.alpha / 255);
                }
            }
        }
    }
}
